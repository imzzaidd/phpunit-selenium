name: Build and Run PHPUnit

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Create .env file
        run: |
          echo "URL=${{ secrets.URL }}" >> .env
          echo "LOGO=${{ secrets.LOGO }}" >> .env
          echo "PRODUCTS=${{ secrets.PRODUCTS }}" >> .env
          echo "USERNAME_FIELD=${{ secrets.USERNAME_FIELD }}" >> .env
          echo "PASSWORD_FIELD=${{ secrets.PASSWORD_FIELD }}" >> .env
          echo "VALID_USER=${{ secrets.VALID_USER }}" >> .env
          echo "VALID_PASSWORD=${{ secrets.VALID_PASSWORD }}" >> .env
          echo "INVALID_USER=${{ secrets.INVALID_USER }}" >> .env
          echo "INVALID_PASSWORD=${{ secrets.INVALID_PASSWORD }}" >> .env
          echo "LOGIN_BUTTON=${{ secrets.LOGIN_BUTTON }}" >> .env
          echo "SUBTITLE=${{ secrets.SUBTITLE }}" >> .env
          echo "ERROR_MESSAGE=${{ secrets.ERROR_MESSAGE }}" >> .env
          echo "EMPTY_MESSAGE=${{ secrets.EMPTY_MESSAGE }}" >> .env
          echo "HAMBURGER_MENU=${{ secrets.HAMBURGER_MENU }}" >> .env
          echo "ABOUT_TEXT=${{ secrets.ABOUT_TEXT }}" >> .env
          echo "LOGOUT_TEXT=${{ secrets.LOGOUT_TEXT }}" >> .env
          echo "LOGIN_INFO=${{ secrets.LOGIN_INFO }}" >> .env
          cat .env

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and run Docker containers
        run: |
          docker-compose up --detach --build
          # Add wait-for-it.sh script content directly here
          cat << 'EOF' > wait-for-it.sh
          #!/usr/bin/env bash
          set -e

          TIMEOUT=15

          while getopts "t:" opt; do
            case ${opt} in
              t )
                TIMEOUT=$OPTARG
                ;;
              \? )
                echo "Invalid option: $OPTARG" 1>&2
                exit 1
                ;;
            esac
          done
          shift $((OPTIND -1))

          if [ "$#" -ne 1 ]; then
            echo "Usage: $0 [-t timeout] host:port"
            exit 1
          fi

          HOSTPORT=$1
          HOST=$(echo "$HOSTPORT" | cut -d : -f 1)
          PORT=$(echo "$HOSTPORT" | cut -d : -f 2)

          for i in $(seq $TIMEOUT); do
            if nc -z "$HOST" "$PORT"; then
              exit 0
            fi
            sleep 1
          done

          echo "Timeout occurred after waiting $TIMEOUT seconds for $HOST:$PORT"
          exit 1
          EOF

          chmod +x wait-for-it.sh
          ./wait-for-it.sh selenium-hub:4444 -t 30
          docker-compose ps
          docker-compose exec -T phpunit vendor/bin/phpunit --configuration phpunit-selenium/phpunit.xml

      - name: Stop Docker services
        run: docker-compose down -v
