pipeline {
    agent any

    environment {
        SELENIUM_HUB_URL = 'http://selenium-hub:4444/wd/hub/status'
    }

    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/imzzaidd/phpunit-selenium'
            }
        }

        stage('Prepare Environment') {
            steps {
                script {
                    def envVars = [
                        "URL=${env.URL}",
                        "LOGO=${env.LOGO}",
                        "USERNAME_FIELD=${env.USERNAME_FIELD}",
                        "PASSWORD_FIELD=${env.PASSWORD_FIELD}",
                        "VALID_USER=${env.VALID_USER}",
                        "VALID_PASSWORD=${env.VALID_PASSWORD}",
                        "INVALID_USER=${env.INVALID_USER}",
                        "INVALID_PASSWORD=${env.INVALID_PASSWORD}",
                        "LOGIN_BUTTON=${env.LOGIN_BUTTON}",
                        "SUBTITLE=${env.SUBTITLE}",
                        "ERROR_MESSAGE=${env.ERROR_MESSAGE}",
                        "EMPTY_MESSAGE=${env.EMPTY_MESSAGE}",
                        "HAMBURGER_MENU=${env.HAMBURGER_MENU}",
                        "ABOUT_TEXT=${env.ABOUT_TEXT}",
                        "LOGOUT_TEXT=${env.LOGOUT_TEXT}",
                        "LOGIN_INFO=${env.LOGIN_INFO}"
                    ]

                    writeFile file: '.env', text: envVars.join('\n')
                }
            }
        }

        stage('Build and Run Docker Containers') {
            steps {
                script {
                    sh 'docker-compose up --build --exit-code-from phpunit'
                }
            }
        }

        stage('List Files for Debugging') {
            steps {
                script {
                    sh 'docker exec phpunit-selenium_phpunit_1 ls -R /var/www/html'
                }
            }
        }
    }

    post {
        always {
            script {
                sh 'docker-compose down'
            }
        }
        success {
            echo 'Build completed successfully!'
        }
        failure {
            echo 'Build failed.'
        }
    }
}

